<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>throw new Error(&quot;Chief&quot;);</title>
    <atom:link href="http://chiefy.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <link>http://chiefy.github.io/</link>
    <description>I complain about technology.</description>
    <pubDate>Sun, 22 Feb 2015 16:23:08 -0500</pubDate>
    
      <item>
        <title>Up &amp; Running With boot2docker, Fig and Packer on OSX</title>
        <link>http://chiefy.github.io/2015/02/24/up-and-running-w-boot2docker-fig-packer.html</link>
        <guid isPermaLink="true">http://chiefy.github.io/2015/02/24/up-and-running-w-boot2docker-fig-packer.html</guid>
        <description>&lt;p&gt;Recently my job has been focusing a bit more on the devops side of things and I have been trying to learn and use docker via boot2docker on OSX. During the process I kept wishing that someone had written about some of the issues I was running into such that I could easily letmegooglethatforyou or SO the answers in a non day-killing manner. Please keep in mind that this stuff moves extremely fast (or slow depending on the project), so be sure to check out the issue links and check on the status before yelling at me that it&amp;#39;s already been fixed. &lt;/p&gt;

&lt;h2&gt;boot2docker&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://boot2docker.io/&quot;&gt;boot2docker&lt;/a&gt; is a lightweight Linux distribution based on Tiny Core Linux made specifically to run Docker containers. It runs completely from RAM, weighs ~27MB and boots in ~5s (YMMV).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In case you aren&amp;#39;t aware, or you&amp;#39;ve been living under a devops rock, &lt;a href=&quot;http://docker.io&quot;&gt;Docker&lt;/a&gt; is the new hotness in virtualization and container technology. I&amp;#39;m not going to get into it here, but there are a zillion posts around the interwebs describing what it is, and what it can help you accomplish for you. &lt;/p&gt;

&lt;p&gt;Because Docker requires a specific Linux Kernel, &lt;a href=&quot;https://docs.docker.com/installation/mac/&quot;&gt;you can&amp;#39;t use Docker exclusively with Darwin/OSX&lt;/a&gt;, you must use a proxy VM to manage your Docker images and containers. This is where boot2docker comes in.&lt;/p&gt;

&lt;p&gt;So instead of having to ssh into a VM and manage your Docker images and containers (potentially a pretty big PITA), boot2docker provides a proxy layer, so you can use docker commands in your local shell just as if you were the docker host. At the time of writing here are versions of these programs I was using:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker --version &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; boot2docker version &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; uname -a
Docker version 1.5.0, build a8a31ef
Boot2Docker-cli version: v1.5.0
Git commit: ccd9032
Darwin cnaje1ML1 13.4.0 Darwin Kernel Version 13.4.0: Wed Dec &lt;span class=&quot;m&quot;&gt;17&lt;/span&gt; 19:05:52 PST 2014&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; root:xnu-2422.115.10~1/RELEASE_X86_64 x86_64&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Along with this great convenience, comes more complexity, and with more complexity, comes various issues when trying to use Docker-dependent programs and utilities.&lt;/p&gt;

&lt;h3&gt;Some Important &lt;code&gt;boot2docker&lt;/code&gt; Commands&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;boot2docker init &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; boot2docker up&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To get things started, you will need to create/init the boot2docker VM, and then actually start the instance.&lt;/p&gt;

&lt;p&gt;See-also: &lt;code&gt;boot2docker save&lt;/code&gt;, &lt;code&gt;boot2docker down&lt;/code&gt;, &lt;code&gt;boot2docker restart&lt;/code&gt; etc. which will manage the state of your VM.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;boot2docker ip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you use boot2docker, it spawns a new VM instance through VirtualBox. This new VM exposes it&amp;#39;s network interface, and if you will be creating any Docker containers which expose network services (you proabbly will), you need to know the VM&amp;#39;s IP address in order to interface with them. The &lt;code&gt;ip&lt;/code&gt; command, like it&amp;#39;s name implies, simply prints out the IP address assigned to the VM.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;boot2docker shellinit&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To get your shell setup properly, you will need to run &lt;code&gt;shellinit&lt;/code&gt; at some point (obviously after you have &lt;code&gt;boot2docker up&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Depending on how your shell is setup, it might be handy to add this to your &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/zsh&lt;/span&gt;
...
boot2docker shellinit &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DOCKER_IP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;boot2docker ip&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Fig&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Fast, isolated development environments using Docker.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you are developing an application using docker containers, you are going to need something to help you orchestrate containers. There are plenty of great write-ups on using Fig, so I will not go into that here. Fig is a great orchestration toolset and was &lt;a href=&quot;http://venturebeat.com/2014/07/22/docker-buys-orchard-a-2-man-startup-with-a-cloud-service-for-running-docker-friendly-apps/&quot;&gt;recently purchased by Docker&lt;/a&gt;. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;fig --version
fig 1.0.1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Shared Data Volumes&lt;/h4&gt;

&lt;p&gt;One of the first issues I ran into using fig and boot2docker was the issue of mounting writable shared volumes with the volumes_from config. The problem is that when boot2docker mounts volumes, it uses vboxfs, and causes several problems when the host container tries to write or change permissions to the shared volume. &lt;/p&gt;

&lt;p&gt;If you are interested, there are various &lt;a href=&quot;https://github.com/docker/docker/issues/4023&quot;&gt;threads&lt;/a&gt; on &lt;a href=&quot;https://github.com/boot2docker/boot2docker/issues/587#issuecomment-66935011&quot;&gt;issues&lt;/a&gt; relating to boot2docker / vboxfs / shared volumes / permissions etc. It&amp;#39;s actually a lot to sort through, and I spent a few days trying to find a solution to the issue I was running into.&lt;/p&gt;

&lt;p&gt;I ended up using GitHub user &lt;a href=&quot;https://github.com/paolomainardi&quot;&gt;@paolomainardi&lt;/a&gt;&amp;#39;s solution to nix using VirtualBox&amp;#39;s vboxfs and &lt;a href=&quot;https://github.com/boot2docker/boot2docker/issues/587#issuecomment-66935011&quot;&gt;instead expose folders via NFS&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;First, modify &lt;code&gt;/etc/exports&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/Users -mapall&lt;span class=&quot;o&quot;&gt;=[&lt;/span&gt;youruser&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;yourgroup&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;boot2dockerip&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After you save, you  may or may not need to sudo /sbin/nfsd restart to restart the NFS daemon in OSX to pick up the changes.&lt;/p&gt;

&lt;p&gt;Then &lt;code&gt;boot2docker ssh&lt;/code&gt; into your VM, and run the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;sudo umount /Users
sudo /usr/local/etc/init.d/nfs-client start
sudo mount 192.168.59.3:/Users /Users -o rw,async,noatime,rsize&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;32768,wsize&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;32768,proto&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;tcp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now when you need your &lt;code&gt;Dockerfile&lt;/code&gt; to change permissions on files mounted via data volumes, it should take. This approach also helps another issue I ran into while running &lt;code&gt;packer&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Dangling images, or, dockerberries&lt;/h3&gt;

&lt;p&gt;One thing you&amp;#39;ll notice when you start working with Fig is that you will start generating a lot of intermediate images that for whatever reason, don&amp;#39;t get cleaned up by fig clean. I have a feeling that &lt;a href=&quot;https://github.com/docker/docker/issues/928&quot;&gt;the next release of docker will include a command to do this&lt;/a&gt;, but for now to remedy this, you can &lt;a href=&quot;https://www.calazan.com/docker-cleanup-commands/&quot;&gt;try this tip&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker rmi &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker images -q -f &lt;span class=&quot;nv&quot;&gt;dangling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or to force cleanup:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker rmi -f &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;docker images -q -f &lt;span class=&quot;nv&quot;&gt;dangling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;even better add this to your aliases:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;docker_clean_danglers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;docker rmi -f $(docker images -q -f dangling=true)&amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Packer&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://packer.io&quot;&gt;Packer&lt;/a&gt; is a tool for creating identical machine images for multiple platforms from a single source configuration.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Packer is a great utility, from HashiCorp, the makers of &lt;a href=&quot;http://vagrantup.com&quot;&gt;Vagrant&lt;/a&gt;, to use configuration files to generate multiple images for different services such as: Amazon EC2, Docker and Vagrant. Need to generate an Amazon AMI, but also want a Docker image you can use elsewhere or push to a registry? Packer is the tool for the job.&lt;/p&gt;

&lt;p&gt;I quickly ran into a weird issue running &lt;code&gt;packer build&lt;/code&gt; using a shell provisioner with &lt;code&gt;inline&lt;/code&gt;. My builder would start, and then mysteriously just sit there and hang when it tried to copy the script. As it turns out, part of the issue is because of &lt;a href=&quot;https://github.com/mitchellh/packer/issues/1752&quot;&gt;a bug using Packer with the latest version of Docker (1.4+)&lt;/a&gt;. I didn&amp;#39;t want to downgrade Docker to 1.3, so I &lt;a href=&quot;https://github.com/mariussturm/packer/commit/3a286ab6bdba7b8e5bf6a43c357a0ffeacd3dc97&quot;&gt;incorporated the fix&lt;/a&gt; locally, and re-built the packer binaries for OSX_x64. &lt;/p&gt;

&lt;p&gt;As of this writing, Packer still hasn&amp;#39;t merged the patch, but you can &lt;a href=&quot;https://www.dropbox.com/s/4v5jvvxj1k5mpst/packer-osx-patched-0.7.5.zip?dl=1&quot;&gt;download my OSX binaries&lt;/a&gt; (install them to &lt;code&gt;/usr/local/bin&lt;/code&gt;), or &lt;a href=&quot;https://github.com/mitchellh/packer#developing-packer&quot;&gt;build them yourself&lt;/a&gt; if you want to get up and running with &lt;em&gt;Go&lt;/em&gt;. &lt;/p&gt;

&lt;p&gt;The second issue is that packer stores it&amp;#39;s temporary files and folders into &lt;code&gt;/var/folders&lt;/code&gt; on OSX. You&amp;#39;ll note from my findings with Fig above, by default boot2docker mounts &lt;code&gt;/Users&lt;/code&gt;, and that&amp;#39;s it, so there is no way for Docker to get provisioned by anything Packer wants to send to it since the boot2docker VM can&amp;#39;t read &lt;code&gt;/var/folders&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are &lt;a href=&quot;https://github.com/mitchellh/packer/issues/398&quot;&gt;several&lt;/a&gt; &lt;a href=&quot;https://github.com/mitchellh/packer/issues/1888&quot;&gt;issues&lt;/a&gt; that have been reported around this, and it looks like most people solved it by setting their &lt;code&gt;TMPDIR&lt;/code&gt; environment variable to something inside their &lt;code&gt;/Users&lt;/code&gt; folder, like: &lt;code&gt;/Users/myuser/tmp&lt;/code&gt; since that folder gets mounted in the boot2docker VM. &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ TMPDIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/Users/chief/tmp packer build mybuild.json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 24 Feb 2015 07:00:00 -0500</pubDate>
      </item>
    
      <item>
        <title>Using Sails Generators To Integrate An ember-cli Project</title>
        <link>http://chiefy.github.io/2014/09/03/sails-generate-ember.html</link>
        <guid isPermaLink="true">http://chiefy.github.io/2014/09/03/sails-generate-ember.html</guid>
        <description>&lt;p&gt;Recently I have been trying to learn &lt;a href=&quot;http://emberjs.com/&quot;&gt;Ember&lt;/a&gt; and I came across the amazing command line utility &lt;a href=&quot;http://www.ember-cli.com/&quot;&gt;&lt;code&gt;ember-cli&lt;/code&gt;&lt;/a&gt; written by &lt;a href=&quot;https://github.com/stefanpenner&quot;&gt;Stefan Penner&lt;/a&gt;. &lt;code&gt;ember-cli&lt;/code&gt; is the missing utility belt for ember based projects. Among its features is a generator that creates a strongly opinionated project structure and build chain (&lt;code&gt;ember&lt;/code&gt; is strongly opinionated - &lt;a href=&quot;http://confy.wecode.io/talks/2013/arrrrcamp/ember-on-rails-convention-over-configuration-on-both-sides-of-the-tubes&quot;&gt;convention over configuration&lt;/a&gt;). &lt;code&gt;ember-cli&lt;/code&gt; uses an &lt;a href=&quot;http://esnext.github.io/es6-module-transpiler/&quot;&gt;ES6 module transpiler&lt;/a&gt; allowing users to use next-gen ES6 module support in their current projects today. It also utilizes &lt;a href=&quot;https://github.com/broccolijs/broccoli&quot;&gt;&lt;code&gt;broccoli&lt;/code&gt;&lt;/a&gt; for build tooling as opposed to &lt;code&gt;grunt&lt;/code&gt; which Sails seems to favor. More on that later.&lt;/p&gt;

&lt;p&gt;Along with &lt;code&gt;ember-cli&lt;/code&gt;, I ran across &lt;a href=&quot;https://github.com/mphasize/sails-ember-blueprints&quot;&gt;&lt;code&gt;sails-ember-blueprints&lt;/code&gt;&lt;/a&gt; by &lt;a href=&quot;https://github.com/mphasize&quot;&gt;mphasize&lt;/a&gt; which overrides some of Sails&amp;#39; blueprint templates for compatibility with &lt;a href=&quot;http://emberjs.com/api/data/&quot;&gt;Ember-Data&lt;/a&gt;&amp;#39;s &lt;code&gt;RESTAdapter&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I decided to take a stab at creating some &lt;a href=&quot;http://sailsjs.org/&quot;&gt;Sails&lt;/a&gt; generators around these great projects.&lt;/p&gt;

&lt;h2&gt;Getting Started&lt;/h2&gt;

&lt;p&gt;In order to get started, you will need to make sure you have the latest &lt;code&gt;sails&lt;/code&gt;, &lt;code&gt;ember-cli&lt;/code&gt; and &lt;code&gt;sails-generate-new-ember&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g sails ember-cli sails-generate-new-ember sails-generate-frontend-ember sails-generate-backend-ember&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To use the newly installed generator, you will need to modify (or create) your &lt;code&gt;.sailsrc&lt;/code&gt; located in your home folder. Sails allows you to override its built-in generators for creating a new application structure. So in theory you could:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;generators&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;modules&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;new&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sails-generate-new-ember&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The issue with that, especially if you save your &lt;code&gt;.sailsrc&lt;/code&gt; in your home folder, is that everytime you call &lt;code&gt;sails new&lt;/code&gt; it will use the ember-based generators. I have a feeling that you probably won&amp;#39;t want that, so instead, you should create a &lt;code&gt;.sailsrc&lt;/code&gt; that uses an alternate module name:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;generators&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;modules&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;ember-app&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sails-generate-new-ember&amp;quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, we can create our new project by calling &lt;code&gt;sails generate&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sails generate ember-app myAwesomeApp&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Project Structure&lt;/h2&gt;

&lt;p&gt;If you are familiar with the default &lt;code&gt;sails new &amp;lt;app-name&amp;gt;&lt;/code&gt; generator and it&amp;#39;s resulting project structure, you will find some large differences here. The first thing to note is that there is no &lt;code&gt;assets&lt;/code&gt; folder. Instead, there is an &lt;code&gt;ember&lt;/code&gt; folder which is where all of the &lt;code&gt;ember-cli&lt;/code&gt; based project structure resides. Since &lt;code&gt;ember-cli&lt;/code&gt; uses &lt;code&gt;broccoli&lt;/code&gt; for tooling, I&amp;#39;ve decided to remove the &lt;code&gt;Gruntfile.js&lt;/code&gt; and &lt;code&gt;tasks&lt;/code&gt; folder for the time being as all of the frontend build is being done by &lt;code&gt;ember serve&lt;/code&gt;.&lt;/p&gt;

&lt;h4&gt;Sails Blueprints&lt;/h4&gt;

&lt;p&gt;I&amp;#39;ve taken the &lt;code&gt;sails-ember-blueprints&lt;/code&gt; project code and inserted it into the &lt;code&gt;sails-generate-backend-ember&lt;/code&gt; step of the generator. The blueprints reside in the &lt;code&gt;api/blueprints&lt;/code&gt; folder, they modify Sails&amp;#39; response output to achieve compatibility with Ember-Data&amp;#39;s &lt;a href=&quot;http://emberjs.com/api/data/classes/DS.RESTAdapter.html&quot;&gt;&lt;code&gt;RESTAdapter&lt;/code&gt;&lt;/a&gt;. Many thanks to GitHub user &lt;a href=&quot;https://github.com/mphasize&quot;&gt;mphasize&lt;/a&gt; for this project as I am sure it saved me a ton of time and effort.&lt;/p&gt;

&lt;h2&gt;Fire It Up!&lt;/h2&gt;

&lt;p&gt;For now, during development, you will need to start up two seperate servers: your Sails API server which will serve your JSON API (port 1337), and &lt;code&gt;ember-cli&lt;/code&gt;&amp;#39;s server which will serve up the proper client application code (port 4200). As you will see when you point your browser to &lt;code&gt;http://localhost:4200/&lt;/code&gt;, there is nothing really to show as we haven&amp;#39;t created any of our frontend (or backend) project. I recommend opening two console tabs and executing one of these commands in each.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sails lift&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ember &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ember serve&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/welcome_to_ember.png&quot; alt=&quot;Initial ember website&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Lessons Learned or How I Learned To Stop Worrying and Love The &lt;code&gt;broccoli&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;When I was developing this generator I was thinking it would be a great opportunity to try to use &lt;code&gt;broccoli&lt;/code&gt; for building out the frontend and serving it with &lt;code&gt;sails lift&lt;/code&gt;. Unfortunately, after looking into some of the code in &lt;code&gt;ember-cli&lt;/code&gt;, it&amp;#39;s not as easy as I had hoped. Both &lt;code&gt;sails lift&lt;/code&gt; and &lt;code&gt;ember serve&lt;/code&gt; try to serve using their own instances of express. &lt;code&gt;ember serve&lt;/code&gt; uses &lt;code&gt;broccoli&lt;/code&gt; under the hood to do a lot when watching templates and files in the &lt;code&gt;ember&lt;/code&gt; project. I have mostly unsuccesfully tried to bootstrap both of these processes in the project&amp;#39;s main &lt;code&gt;app.js&lt;/code&gt; file, which you can run with &lt;code&gt;node app.js&lt;/code&gt;, but you will see both commands try to use the output stream asynchronously and it results in a confusing jumble of console output. This would especially be confusing when trying to debug.  &lt;/p&gt;

&lt;h2&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Obviously this site doesn&amp;#39;t do anything with our Sails backend,  but it gives you a starting point to create your web application using Sails and Ember. Having to run two commands to serve the Sails backend and Ember frontend is not optimal. I created these generators as an exercise to learn &lt;code&gt;ember-cli&lt;/code&gt;, ES6 Modules and dig a little deeper into Sails generators. As Ember projects seem to gravitate towards using Rails, I thought this would be a clear next-step to get the application stack &lt;em&gt;one hundred percent JS&lt;/em&gt;. &lt;/p&gt;

&lt;h4&gt;!CAUTION!&lt;/h4&gt;

&lt;p&gt;These generators are not intended for production use (yet), but any feedback and/or critique is welcome.&lt;/p&gt;

&lt;h4&gt;&lt;code&gt;sails-generate-new-ember&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/chiefy/sails-generate-new-ember&quot; class=&quot;github-button&quot; data-style=&quot;mega&quot; data-icon=&quot;octicon-star&quot; data-count-href=&quot;/chiefy/sails-generate-new-ember#stargazers&quot; data-count-api=&quot;/repos/chiefy/sails-generate-new-ember#stargazers_count&quot;&gt; Star &lt;/a&gt;
&lt;a href=&quot;https://github.com/chiefy/sails-generate-new-ember&quot; class=&quot;github-button&quot; data-style=&quot;mega&quot; data-icon=&quot;octicon-git-branch&quot; &gt; Fork &lt;/a&gt;
&lt;a href=&quot;https://github.com/chiefy/&quot; class=&quot;github-button&quot; data-style=&quot;mega&quot; data-icon=&quot;octicon-mark-github&quot; data-count-href=&quot;/chiefy/followers&quot; data-count-api=&quot;/users/chiefy#followers&quot;&gt; Follow chiefy &lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 03 Sep 2014 14:00:00 -0400</pubDate>
      </item>
    
      <item>
        <title>Using SQLite and Sequelize with ActionHero</title>
        <link>http://chiefy.github.io/2014/07/13/using-sqlite-sequelize-with-actionhero.html</link>
        <guid isPermaLink="true">http://chiefy.github.io/2014/07/13/using-sqlite-sequelize-with-actionhero.html</guid>
        <description>&lt;p&gt;This past weekend I was checking out &lt;a href=&quot;http://actionherojs.com/&quot;&gt;ActionHero&lt;/a&gt;, a pretty nice API framework written in Node.js which claims to be: &amp;quot;Reusable, Scalable, and Quick!&amp;quot; I was setting up a quick example and I didn&amp;#39;t want to have to connect to a MySQL or Postgres DB. ActionHero comes with &lt;code&gt;fakeredis&lt;/code&gt;, an in-memory pseudo-redis store, which is great for experimenting but I wanted to use a local disk store. A few google searches didn&amp;#39;t turn up too much on how to use SQLite with ActionHero, so here we go.&lt;/p&gt;

&lt;h3&gt;pre-req&amp;#39;s:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://nodejs.org/&quot;&gt;Node.js&lt;/a&gt; (v0.10.x)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sqlite.org/&quot;&gt;SQLite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you like to GUI, A SQLite GUI (such as &lt;a href=&quot;http://sqlitebrowser.org/&quot;&gt;SQLite Browser&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Install ActionHero&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g actionhero&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Create a new project&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~ &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mkdir meatr &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; actionhero generate&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will scaffold a new ActionHero project. At this point you can run &lt;code&gt;npm start&lt;/code&gt; and you can visit &lt;code&gt;http://localhost:8080&lt;/code&gt; to see some basic info about your ActionHero API.&lt;/p&gt;

&lt;h3&gt;Add dependencies&lt;/h3&gt;

&lt;p&gt;Next, we will need to add some dependencies to our project. We are going to install &lt;code&gt;sqlite3&lt;/code&gt; for SQLite support and &lt;a href=&quot;http://sequelizejs.com/&quot;&gt;Sequelize&lt;/a&gt; which is an ORM designed to abstract away your DB boilerplate code. Sequelize works with SQLite, MySQL and Postgres as of this writing. For quick prototyping it might be worth starting with a small/local store like SQLite and then moving to MySQL or Postgres when you have to start thinking about scaling / performance issues. Also there are some features that MySQL and Postgres include that SQLite won&amp;#39;t (and can&amp;#39;t) ever support.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install --save sqlite3 sequelize&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Create a config&lt;/h3&gt;

&lt;p&gt;Although we&amp;#39;re just going to be using a simple SQLite flat-file database, let&amp;#39;s make a configuration for any parameters we&amp;#39;ll need to send along.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// config/sqlite.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;sqlite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/../store/app.sqlite&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;dialect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;sqlite&amp;#39;&lt;/span&gt;  
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All we are doing here is attaching a new function to ActionHero&amp;#39;s default configuration. The function gets injected with the root ActionHero object &lt;code&gt;api&lt;/code&gt;, but we don&amp;#39;t really need to worry about that here. We simply return an object with two keys: &lt;code&gt;storage&lt;/code&gt; &amp;amp; &lt;code&gt;dialect&lt;/code&gt;. &lt;code&gt;storage&lt;/code&gt; will tell Sequelize where the file store is located. &lt;code&gt;dialect&lt;/code&gt; informs Sequelize what type of store we are using, in this case it&amp;#39;s a SQLite file store. If you were going to use MySQL or Postgres, you could include other configuration properties here such as &lt;code&gt;username&lt;/code&gt;,&lt;code&gt;password&lt;/code&gt;,&lt;code&gt;port&lt;/code&gt;,&lt;code&gt;hostname&lt;/code&gt;, etc.&lt;/p&gt;

&lt;h3&gt;Let&amp;#39;s initialize!&lt;/h3&gt;

&lt;p&gt;ActionHero has &lt;a href=&quot;http://actionherojs.com/docs/core/initializers.html&quot;&gt;the concept of &lt;code&gt;Initializers&lt;/code&gt;&lt;/a&gt; which bootstrap configurations before the API initially starts. We need to expose an API to setup our data store. ActionHero provides a handy command line interface to scaffold certain elements of the project.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;actionhero generateInitializer --name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sqlite&amp;quot;&lt;/span&gt;
info: actionhero &amp;gt;&amp;gt; generateInitializer
info:  - wrote file &lt;span class=&quot;s1&quot;&gt;&amp;#39;C:\Users\cnajewicz\Documents\meatr\initializers\sqlite.js&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This creates a new file at &lt;code&gt;initializers/sqlite.js&lt;/code&gt; with some stubbed methods:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// initializers/sqlite.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqlite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqlite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqlite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqlite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_stop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our module here exports a function which is injected with the root ActionHero object &lt;code&gt;api&lt;/code&gt; and a callback function, &lt;code&gt;next&lt;/code&gt;. If you&amp;#39;ve never used frameworks like &lt;code&gt;express.js&lt;/code&gt;, the &lt;code&gt;next&lt;/code&gt; callback is used to progress through the next &amp;quot;task&amp;quot; on the stack to run. If you are doing anything asynchronus, make sure not to execute &lt;code&gt;next&lt;/code&gt; until your promise is resolved or rejected.&lt;/p&gt;

&lt;p&gt;ActionHero has several pre-defined hooks: &lt;code&gt;_start&lt;/code&gt; and &lt;code&gt;_stop&lt;/code&gt; run exactly when you think they would. We&amp;#39;ll be focusing on the &lt;code&gt;_start&lt;/code&gt; method to setup our data store and models. We&amp;#39;ll be creating a new instance of &lt;code&gt;Sequelize&lt;/code&gt;, so we&amp;#39;ll import the module.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// initializers/sqlite.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sequelize&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqlite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqlite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqlite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqlite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_stop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Wait, models?&lt;/h3&gt;

&lt;p&gt;Right, the cool thing about Sequelize is that it abstracts creating your tables away from you, making it easy to define your models in one place and not necessarily have to worry about your table naming etc. Let&amp;#39;s create our &lt;code&gt;Meat&lt;/code&gt; model file:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ mkdir models &amp;amp;&amp;amp; cd $_ &amp;amp;&amp;amp; touch Meat.js&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// models/Meat.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DataTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;define&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Meat&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DataTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;INTEGER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;primaryKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;autoIncrement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DataTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;tastes_like&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DataTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;STRING&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;is_tasty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;DataTypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BOOLEAN&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Later when we actually import our &amp;quot;Meat&amp;quot; module, it gets injected by Sequelize with our Sequelize object and a shortcut to an enum &lt;code&gt;DataTypes&lt;/code&gt;. You can read about Sequelize data types on their &lt;a href=&quot;https://github.com/sequelize/sequelize/wiki/API-Reference-DataTypes&quot;&gt;official documentation&lt;/a&gt;. We&amp;#39;re using the &lt;code&gt;define&lt;/code&gt; method here which takes a string description of your model in the singular and then an attributes hash which will map to columns in the data store.&lt;/p&gt;

&lt;h3&gt;...and we&amp;#39;re back (to Initializers)&lt;/h3&gt;

&lt;p&gt;Back to our sqlite initializer (&lt;code&gt;initializers/sqlite.js&lt;/code&gt;), we need to create a &lt;a href=&quot;https://github.com/sequelize/sequelize/wiki/API-Reference-Sequelize#new-sequelize&quot;&gt;new instance of Sequelize&lt;/a&gt;, and also create a models collection (&lt;code&gt;api.models&lt;/code&gt;), and use the &lt;code&gt;import&lt;/code&gt; method of our Sequelize instance &lt;code&gt;sqlized&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// initializers/sqlite.js&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sequelize&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqlite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
  &lt;span class=&quot;c1&quot;&gt;// omitting database name, username and password as it&amp;#39;s not required&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sqlized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sequelize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqlite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;models&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Meat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sqlized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/../models/Meat.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  
  &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqlite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqlite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqlite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_stop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Later, when we need to perform CRUD operations on our &lt;code&gt;Meat&lt;/code&gt; models, we&amp;#39;ve stored a reference in &lt;code&gt;api.models&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Sync the schema&lt;/h3&gt;

&lt;p&gt;You may have noticed that all we&amp;#39;ve done with our actual SQLite store is simply create the file. It&amp;#39;s time to syncronize our models with the SQLite store and create any necessary schema. Sequelize makes this simple with the &lt;code&gt;sync&lt;/code&gt; method. &lt;code&gt;sync&lt;/code&gt; returns a Promise, so we&amp;#39;ll provide two functions (succes, error) to &lt;code&gt;then&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sqlite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;models&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;Meat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sqlized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kr&quot;&gt;import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/../models/Meat.js&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;nx&quot;&gt;sqlized&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;syncSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;syncError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;syncSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Succesfully synced DB!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;syncError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Error while executing DB sync: &amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Do it doug!&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s start this thing up and see what happens.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In a flurry of activity, you should see a bunch of logs flow down your screen. Some items to make a note of: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;2014-07-14 5:16:44 - info: running custom initializer: sqlite&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;2014-07-14 5:16:44 - info: Succesfully synced DB!
2014-07-14 5:16:44 - debug:  &amp;gt; start: sqlite&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point you should be able to open up &lt;code&gt;store/app.sqlite&lt;/code&gt; and see our Meat schema which has been automagically created by Sequelize. Hit &lt;code&gt;CTRL-C&lt;/code&gt; to quite our server process.&lt;/p&gt;

&lt;h3&gt;Actions&lt;/h3&gt;

&lt;p&gt;We have succesfully created a SQLite store for our Meat schema, but we have no way of getting data into it via the API. Let&amp;#39;s quickly create an ActionHero action to expose an API endpoint which we can &lt;code&gt;POST&lt;/code&gt; to create some meat!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// actions/meat.js&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;meatAdd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;meatAdd&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Add a new meat!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;blockedConnectionTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;outputExample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;matchExtensionMimeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;toDocument&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;optional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;is_tasty&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;tastes_like&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;new_meat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;is_tasty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;is_tasty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;tastes_like&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;tastes_like&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

    &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;models&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Meat&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;new_meat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createSuccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;created_meat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;meat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;created_meat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;createError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;api&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Could not create new meat named: &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;new_meat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3&gt;Try it out&lt;/h3&gt;

&lt;p&gt;After saving &lt;code&gt;actions/meat.js&lt;/code&gt;, start ActionHero up again by issuing &lt;code&gt;npm start&lt;/code&gt;. Using a utility (I used POSTman, you can use cURL etc.), send a &lt;code&gt;POST&lt;/code&gt; to &lt;code&gt;http://localhost:8080/api/meatAdd&lt;/code&gt; and add some meat!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/postman_actionhero.jpg&quot; alt=&quot;POSTMan Example&quot;&gt;&lt;/p&gt;

&lt;p&gt;Open up your favorite SQLite GUI and verify the record was stored:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sqlite_browser.jpg&quot; alt=&quot;Our Meat Exists&quot;&gt;&lt;/p&gt;

&lt;p&gt;Up next, we&amp;#39;ll create an &lt;a href=&quot;http://emberjs.com&quot;&gt;EmberJS&lt;/a&gt; based UI for our meat app.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/chiefy/sqlite-sequelize-actionhero-demo&quot; class=&quot;github-button&quot; data-style=&quot;mega&quot; data-icon=&quot;octicon-git-branch&quot; &gt; Fork &lt;/a&gt; 
I&amp;#39;ve included the source for this project on &lt;a href=&quot;https://github.com/chiefy/sqlite-sequelize-actionhero-demo&quot;&gt;GitHub&lt;/a&gt;. &lt;/p&gt;
</description>
        <pubDate>Sun, 13 Jul 2014 12:59:27 -0400</pubDate>
      </item>
    
      <item>
        <title>Easily create Angular-based frontend scaffolding for Sails</title>
        <link>http://chiefy.github.io/2014/06/24/using-sails-generate-frontend-angular.html</link>
        <guid isPermaLink="true">http://chiefy.github.io/2014/06/24/using-sails-generate-frontend-angular.html</guid>
        <description>&lt;p&gt;SailsJS 0.10 introduces the concept of generators, a layer to allow users to create their own templates around the various pieces of a SailsJS project. One of the generators, sails-generate-frontend will generate all your front-end assets. I have created sails-generate-frontend-angular, a generator to override the default frontend generator and create a simple scaffold for an Angular frontend.&lt;/p&gt;

&lt;p&gt;The first thing you will need to do is make sure to install Sails release-candidate 0.10.x.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g sails@beta&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Install sails-generate-frontend-angular.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g sails-generate-frontend-angular&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The best way to use this generator is to have it kick off as part of Sails&amp;#39; &lt;code&gt;generate-new&lt;/code&gt; generator which runs when you execute &lt;code&gt;sails new &amp;lt;appName&amp;gt;&lt;/code&gt;. In order for Sails to recognize this generator, we must modify our &lt;code&gt;.sailsrc&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~ &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; vim .sailsrc&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;quot;generators&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;         &lt;span class=&quot;nt&quot;&gt;&amp;quot;modules&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;             &lt;span class=&quot;nt&quot;&gt;&amp;quot;frontend&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sails-generate-frontend-angular&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After you have saved your &lt;code&gt;.sailsrc&lt;/code&gt; file to your home directory, create a new sails project and fire it up! Open up your favorite web browser and go to &lt;code&gt;http://localhost:1337/&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sails new ngSailsApp &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;ngSailsApp &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sails lift&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/img/sails-generate-frontend-angular/new_app_screenshot.jpg&quot; alt=&quot;Screenshot&quot;&gt;&lt;/p&gt;

&lt;p&gt;Exit your Sails app with &lt;code&gt;ctrl-c&lt;/code&gt;. Now generate an api. For this example, we&amp;#39;ll generate an api around a movie class.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sails generate api movie

info: Created a new model &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Movie&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at api/models/Movie.js!
info: Created a new controller &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;movie&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; at api/controllers/MovieController.js!

info: REST API generated @ http://localhost:1337/movie
info: and will be available the next &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;you run &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;sails lift&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Modify your generated model file (in &lt;code&gt;api/models/Movie.js&lt;/code&gt;) to add some attributes.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;attributes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;year&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;integer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;genre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;rating&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;integer&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once again, fire up the Sails app with &lt;code&gt;sails lift&lt;/code&gt;, and open a browser to &lt;code&gt;http://localhost:1337/#/movies&lt;/code&gt;. Here you will see a very, very, very unstyled, basic CRUD scaffold built with &lt;a href=&quot;http://sailsjs.org/&quot;&gt;Sails&lt;/a&gt;, &lt;a href=&quot;https://angularjs.org/&quot;&gt;Angular&lt;/a&gt;, &lt;a href=&quot;https://github.com/mgonto/restangular/&quot;&gt;RESTAngular&lt;/a&gt;, and &lt;a href=&quot;http://angular-ui.github.io/ui-router/site/#/api/ui.router&quot;&gt;ui-router&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/sails-generate-frontend-angular/new_movie_crud.gif&quot; alt=&quot;CRUD Movie Example&quot;&gt;&lt;/p&gt;

&lt;p&gt;Please feel free to check out the &lt;a href=&quot;https://github.com/chiefy/sails-generate-frontend-angular&quot;&gt;code on github&lt;/a&gt; and make any suggestions you feel would improve the project.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/chiefy/sails-generate-frontend-angular&quot; class=&quot;github-button&quot; data-style=&quot;mega&quot; data-icon=&quot;octicon-star&quot; data-count-href=&quot;/chiefy/sails-generate-frontend-angular#stargazers&quot; data-count-api=&quot;/repos/chiefy/sails-generate-frontend-angular#stargazers_count&quot;&gt; Star &lt;/a&gt;
&lt;a href=&quot;https://github.com/chiefy/&quot; class=&quot;github-button&quot; data-style=&quot;mega&quot; data-icon=&quot;octicon-mark-github&quot; data-count-href=&quot;/chiefy/followers&quot; data-count-api=&quot;/users/chiefy#followers&quot;&gt; Follow chiefy &lt;/a&gt;
&lt;a href=&quot;https://github.com/chiefy/sails-generate-frontend-angular&quot; class=&quot;github-button&quot; data-style=&quot;mega&quot; data-icon=&quot;octicon-git-branch&quot; &gt; Fork &lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 24 Jun 2014 01:00:00 -0400</pubDate>
      </item>
    
      <item>
        <title>Using generators in SailsJS 0.10.x</title>
        <link>http://chiefy.github.io/2014/04/13/using-generators-in-sailsjs-010.html</link>
        <guid isPermaLink="true">http://chiefy.github.io/2014/04/13/using-generators-in-sailsjs-010.html</guid>
        <description>&lt;p&gt;Sails&amp;#39; new &lt;a href=&quot;https://github.com/balderdashy/sails/tree/v0.10.0-rc5&quot;&gt;release candidate&lt;/a&gt; is a pretty big shift from the 0.9 version, and in a good way.&lt;/p&gt;

&lt;h2&gt;What is a generator?&lt;/h2&gt;

&lt;p&gt;In Sails-land, a generator is basically a templated way to create something inside your project. If you are a &lt;a href=&quot;http://yeoman.io&quot;&gt;Yeoman&lt;/a&gt; user, sails generators are analgous.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;quot;[Generators] create new files and folders within your app based on the options and templates you provide the generator&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In previous versions of Sails, there are only built-in generators:
&lt;code&gt;bash
$ sails generate model foo
&lt;/code&gt;
In turn, Sails would create a new file &lt;code&gt;Foo.js&lt;/code&gt; in your &lt;code&gt;api/models&lt;/code&gt; folder. The scaffold for the model was quite limited. Now Sails allows you to create your own custom generators for just about anything you can imagine.&lt;/p&gt;

&lt;h2&gt;How do I use custom generators?&lt;/h2&gt;

&lt;p&gt;The other day on #sailsjs, someone wanted to know how to use generators to create a model in &lt;a href=&quot;http://coffeescript.org/&quot;&gt;coffeescript&lt;/a&gt;. I looked around, and found out that github user &lt;a href=&quot;https://github.com/t3chnoboy&quot;&gt;t3chnoboy&lt;/a&gt; had pushed code to support it. Unfortunately, it wasn&amp;#39;t clear to me just exactly how to get generators and sails working together.&lt;/p&gt;

&lt;p&gt;Make sure you have the 0.10.0-rc5 release installed globally
&lt;code&gt;bash
$ npm install -g sails@beta
&lt;/code&gt;
This will install the latest RC of Sails globally. If you are still using 0.9.x, you can always roll-back later. (If you know how to easily switch between two versions of a globally installed npm package, please let me know!)&lt;/p&gt;

&lt;p&gt;Create a new Sails project 
&lt;code&gt;bash
$ sails new testApp &amp;amp;&amp;amp; cd testApp
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Install the &lt;code&gt;sails-generate-model&lt;/code&gt; package
&lt;code&gt;bash
$ npm install --save-dev sails-generate-model
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Modify your &lt;code&gt;.sailsrc&lt;/code&gt; file to expose your project to the generator
We are using a custom generator for the keyword &amp;#39;model&amp;#39;, so in our &lt;code&gt;.sailsrc&lt;/code&gt; JSON, we need to tell Sails to use the installed package to generate models when we &lt;code&gt;sails generate model &amp;lt;modelname&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;   &lt;span class=&quot;nt&quot;&gt;&amp;quot;generators&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;quot;modules&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;       &lt;span class=&quot;nt&quot;&gt;&amp;quot;model&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sails-generate-model&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Save that file, and use it to generate a new coffeescript model:
&lt;code&gt;bash
$ sails generate new model foo --coffee
&lt;/code&gt;
Now if you open up your &lt;code&gt;api/models&lt;/code&gt; folder, you should see a file &lt;code&gt;Foo.coffee&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffeescript&quot; data-lang=&quot;coffeescript&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Foo.coffee&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# @description :: TODO: You might write a short summary of how this model works and what it represents here.&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# @docs        :: http://sailsjs.org/#!documentation/models&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;module.exports =&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;8&lt;/span&gt;   &lt;span class=&quot;nv&quot;&gt;attributes: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Where to go from here?&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;npm search sails-generate&lt;/code&gt; is a good way to see what has been created so far. &lt;/p&gt;
</description>
        <pubDate>Sun, 13 Apr 2014 12:59:27 -0400</pubDate>
      </item>
    
  </channel>
</rss>
